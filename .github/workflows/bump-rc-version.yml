name: Bump RC Version in Release Branch

on:
  workflow_dispatch:
    inputs:
      custom_version:
        description: 'Custom version to set (optional). If not provided, will increment RC by 1'
        required: false
        type: string

jobs:
  bump-rc-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0  # Fetch all history for all branches


      - name: Get current release branch
        id: release-branch
        shell: bash
        run: |
          echo "current_release_minor=$(cut -d "." -f 1,2 < VERSION.txt)" >> "$GITHUB_OUTPUT"

      - name: Bump rc version on release branch
        shell: bash
        env:
          # We use the HAYSTACK_BOT_TOKEN here so the PR created by the step will
          # trigger required workflows and can be merged by anyone
          GITHUB_TOKEN: ${{ secrets.HAYSTACK_BOT_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Get the current release branch
          RELEASE_BRANCH="v${{ steps.release-branch.outputs.current_release_minor }}.x"
          # git checkout $RELEASE_BRANCH

          # Check if the release branch exists remotely
          if ! git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "Error: Release branch $RELEASE_BRANCH does not exist on remote"
            exit 1
          fi
          
          # Checkout the release branch (create local tracking branch if needed)
          git checkout -B $RELEASE_BRANCH origin/$RELEASE_BRANCH

          # Store the original version before updating
          ORIGINAL_VERSION=$(cat VERSION.txt)

          # Determine the new version
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          if [[ -n "$CUSTOM_VERSION" ]]; then
            # Use the custom version provided by user
            NEW_VERSION="$CUSTOM_VERSION"
            echo "Using custom version: $NEW_VERSION"
          else
            # Auto-increment the rc version
            if [[ $ORIGINAL_VERSION =~ rc[0-9]+$ ]]; then
              # If version already has rc suffix, increment the rc number
              NEW_VERSION=$(echo "$ORIGINAL_VERSION" | sed -E 's/rc([0-9]+)$/rc\1/' | awk -F'rc' '{print $1 "rc" ($2+1)}')
              echo "Auto-incrementing RC version: $NEW_VERSION"
            else
              # raise an error
              echo "Error: VERSION.txt does not contain a rc version and no custom version provided"
              exit 1
            fi
          fi
          
          echo "$NEW_VERSION" > VERSION.txt

          # Commit and push the version bump
          git add .
          git commit -m "bump rc version to $NEW_VERSION"
          git push -u origin $RELEASE_BRANCH

          echo "Successfully bumped rc version from $ORIGINAL_VERSION to $NEW_VERSION on $RELEASE_BRANCH"
